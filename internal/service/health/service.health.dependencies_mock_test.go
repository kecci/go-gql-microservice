// Code generated by MockGen. DO NOT EDIT.
// Source: service.health.dependencies.go

// Package health is a generated GoMock package.
package health

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	health "github.com/kecci/go-gql-microservice/internal/model/health"
	reflect "reflect"
)

// MockhealthRepo is a mock of healthRepo interface
type MockhealthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockhealthRepoMockRecorder
}

// MockhealthRepoMockRecorder is the mock recorder for MockhealthRepo
type MockhealthRepoMockRecorder struct {
	mock *MockhealthRepo
}

// NewMockhealthRepo creates a new mock instance
func NewMockhealthRepo(ctrl *gomock.Controller) *MockhealthRepo {
	mock := &MockhealthRepo{ctrl: ctrl}
	mock.recorder = &MockhealthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockhealthRepo) EXPECT() *MockhealthRepoMockRecorder {
	return m.recorder
}

// CheckHealth mocks base method
func (m *MockhealthRepo) CheckHealth(ctx context.Context) (*health.Health, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", ctx)
	ret0, _ := ret[0].(*health.Health)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHealth indicates an expected call of CheckHealth
func (mr *MockhealthRepoMockRecorder) CheckHealth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockhealthRepo)(nil).CheckHealth), ctx)
}
